#!/bin/sh

# Setup the system for the initial Freifunk configuration.
# This script is only run once om first boot and is deleted afterwards.

exec >/root/freifunk_setup.log 2>&1

. /lib/functions.sh

random_mac() {
	echo -n 02; dd bs=1 count=5 if=/dev/urandom 2>/dev/null | hexdump -v -e '/1 ":%02x"'
}

initial_wifi_setup()
{
	echo "(I) Setup /etc/config/wireless"

	#AP default SSID
	local ap_ssid="$(uci get freifunk.@settings[0].community).freifunk.net"

	#802.11s default mesh id
	local mesh_id="$(uci get freifunk.@settings[0].default_mesh_id)"

	#delete all wifi interfaces
	while uci -q delete wireless.@wifi-iface[0]; do :; done

	#test if we can span both Ad-Hoc and Access Point interfaces
	config_wifi() {
		local ds="$1" #device section
		local ah_ok=0 ap_ok=0 #interface status
		local wifi_device=`uci get -q wireless.$ds.device`
		local wifi_path=`uci get -q wireless.$ds.path`
		local h n p

		[ -z "$wifi_device" ] && wifi_device="$ds"

		echo "(I) Configure wifi device: '$wifi_device'"

		if [ `uci get wireless.$ds.channel` -gt 35 ]; then
			uci set wireless.$ds.channel=36
		else
			uci set wireless.$ds.channel=1
		fi

		uci set wireless.$ds.country='DE'
		uci set wireless.$ds.disabled='0'
		#not a valid value, but will be ignored otherwise
		uci set wireless.$ds.txpower='auto'

		#mesh interface
		h="wireless.${wifi_device}_mesh"
		uci set $h="wifi-iface"
		uci set $h.device="$wifi_device"
		uci set $h.mode="mesh"
		uci set $h.network="${wifi_device}_mesh"
		uci set $h.mesh_id="$mesh_id"
		uci set $h.mesh_fwding=0


		#additional config for mesh interface
		n="network.${wifi_device}_mesh"
		uci set $n="interface"
		uci set $n.mtu=1532
		uci set $n.proto="batadv"
		uci set $n.mesh="bat0"

		#ap interface
		p="wireless.${wifi_device}_ap"
		uci set $p="wifi-iface"
		uci set $p.device="$wifi_device"
		uci set $p.mode=ap
		uci set $p.network=freifunk
		uci set $p.ssid="$ap_ssid"
		uci set $p.encryption="none"
	}

	config_load wireless
	config_foreach config_wifi wifi-device


	remove_ula() {
		case "$1" in
			*ff:fe*)
				uci del_list network.freifunk.ip6addr="$1"
				;;
		esac
	}

	#remove hard stored ula address
	config_load network
	config_list_foreach freifunk ip6addr remove_ula


 	uci commit network
}

initial_lan_setup()
{
	echo "(I) Setup lan network."

	local lan_interfaces="$1"

	uci delete -q network.lan
	uci set network.lan="interface"
	uci set network.lan.type="bridge"
	uci set network.lan.ifname="$lan_interfaces"
	uci delete -q network.lan.ip6addr
	uci delete -q network.lan.ipaddr
	uci add_list network.lan.ipaddr="192.168.133.1"
	uci set network.lan.proto=static
	uci set network.lan.netmask="255.255.255.0"
	uci set network.lan.igmp_snooping="0"
	uci set network.lan.force_link="1"
	uci set network.lan.bridge_empty="1"
}

initial_freifunk_setup()
{
	echo "(I) Setup freifunk network."

	local freifunk_interfaces="$1"
	local freifunk_mac="$2"

	uci delete -q network.freifunk
	uci set network.freifunk="interface"
	uci set network.freifunk.type="bridge"
	uci set network.freifunk.ifname="$freifunk_interfaces"
	uci set network.freifunk.macaddr="$freifunk_mac"
	uci delete -q network.freifunk.ip6addr
	uci delete -q network.freifunk.ipaddr
	uci set network.freifunk.proto=static
	uci set network.freifunk.netmask="255.255.240.0"
	uci set network.freifunk.igmp_snooping="0"
	uci set network.freifunk.force_link="1"
	uci set network.freifunk.bridge_empty="1"

	uci set network.freifunk6="interface"
	uci set network.freifunk6.ifname="@freifunk"
	uci set network.freifunk6.proto="dhcpv6"
	uci set network.freifunk6.reqaddress="none" #slaac only
	uci set network.freifunk6.reqprefix="no" #disable dhcpv6 /128 request
}

initial_local_node_setup()
{
	echo "(I) Setup IPv4 and IPv6 local node access."

	local addr4="10.11.175.127"
	local addr6="$(uci get network.globals.ula_prefix)" #CIDR notation


	uci add_list network.freifunk.ipaddr="$addr4"
	uci add_list network.freifunk.ipaddr6="$addr6"

	cat >> /etc/firewall.user <<-  EOF

	#isolate local-node IPv4 address
	ebtables -A FORWARD --logical-out br-freifunk -o bat0 -p arp --arp-ip-dst $addr4/32 -j DROP
	ebtables -A OUTPUT --logical-out br-freifunk -o bat0 -p arp --arp-ip-dst $addr4/32 -j DROP
	ebtables -A FORWARD --logical-out br-freifunk -o bat0 -p IPv4 --ip-source $addr4/32 -j DROP
	ebtables -A OUTPUT --logical-out br-freifunk -o bat0 -p IPv4 --ip-source $addr4/32 -j DROP
	EOF
}

initial_wan_setup()
{
	echo "(I) Setup WAN network."

	local wan_interfaces="$1"
	local wan_mac="$2"

	uci -q delete network.wan
	uci -q delete network.wan6

	uci set network.wan="interface"
	uci set network.wan.type="bridge"
	uci set network.wan.ifname="$wan_interfaces"
	uci set network.wan.proto="dhcp"
	uci set network.wan.macaddr="$wan_mac"
	uci set network.wan.bridge_empty="1"

	uci set network.wan6="interface"
	uci set network.wan6.ifname="@wan"
	uci set network.wan6.proto="dhcpv6"
	#add the default route for wan to table 1
	uci set network.wan6.ip6table="1"

	#use table 1 also for all traffic marked by mark 1 (fastd)
	uci set network.wan6_lookup="rule6"
	uci set network.wan6_lookup.mark="0x01/0x01"
	uci set network.wan6_lookup.lookup="1"

	uci set network.wan6_unreachable="route6"
	uci set network.wan6_unreachable.type="unreachable"
	uci set network.wan6_unreachable.table="1"
	uci set network.wan6_unreachable.target="::/0"
	uci set network.wan6_unreachable.metric="65535"
	uci set network.wan6_unreachable.gateway="::"
	uci set network.wan6_unreachable.interface="loopback"
}

initial_setup()
{
	local prefix="fdef:1701:b5ee:42::/64"

	local wan_interface=$(uci get -q network.wan.ifname)
	echo "(I) WAN interface: '$wan_interface'"

	local lan_interface=$(uci get -q network.lan.ifname)
	echo "(I) LAN interface: '$lan_interface'"

	local mesh_id=$(uci get -q freifunk.@settings[0].default_mesh_id)
	echo "(I) Mesh ID: '$mesh_id'"

	echo "(I) Set empty root password."
	(echo ""; sleep 1; echo "") | passwd > /dev/null

	#get a unique MAC address to identify the node
	local mac="$(cat /sys/class/ieee80211/phy0/macaddress 2> /dev/null)"
	if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
		mac="$(cat /sys/class/net/eth0/address)"
		if [ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ]; then
			#random MAC address
			mac="$(random_mac)"
		fi
	fi

	local mac_ga="$mac"
	#translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a ^ 2)) #flip second bit
	a=`printf '%02x\n' $a` #convert to hex
	local mac_la="$a:${mac#*:}" #reassemble mac

	echo "(I) MAC: '$mac'"

	echo "(I) Set Prefix and populate /etc/hosts."

	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="$prefix"
	echo "10.11.175.127 node" >> /etc/hosts

	# ------------------------------------------- #
	# S E T U P  W I R E L E S S #
	# ------------------------------------------- #

	initial_wifi_setup

	# ------------------------------------- #
	# P R I V A T E  S E T U P #
	# ------------------------------------- #

	initial_lan_setup "$lan_interface"

	# ------------------------------------- #
	# P U B L I C  S E T U P #
	# ------------------------------------- #

	initial_freifunk_setup "bat0" "$mac_la"

	# ------------------------------------- #
	# W A N  S E T U P #
	# ------------------------------------- #

	initial_wan_setup "$wan_interface" "$mac_ga"

	# ------------------------------------- #
	# B A T M A N  S E T U P #
	# ------------------------------------- #

	echo "(I) Add network sections to add fastd to batman-adv and set MTU."
	local n=network.fastd_mesh
	uci set $n=interface
	uci set $n.ifname=fastd_mesh
	uci set $n.mtu=1406
	uci set $n.proto="batadv"
	uci set $n.mesh="bat0"
	uci set $n.mesh_no_rebroadcast="1"

	# ------------------------------------- #
	# M I S C  S E T U P #
	# ------------------------------------- #

	#special WR1043v2 switch fixup for the webui
	case "$(cat /tmp/sysinfo/model)" in
		"TP-Link TL-WR1043N/ND v2" | "TP-Link TL-WR1043N/ND v3")
			#special WR1043v2 switch fixup for the webui
			uci set network.@switch_vlan[-2].ports="1 2 3 4 0t"
			uci set network.@switch_vlan[-1].ports="5 0t"
			uci set network.lan.ifname="eth1.1"
			uci set network.wan.ifname="eth1.2"
			uci commit network
			;;
		"TP-Link Archer C7 v2")
			#special Archer C7 v2 switch fixup for the webui
			uci set network.@switch_vlan[-2].ports="2 3 4 5 0t"
			uci set network.@switch_vlan[-1].ports="1 6 0t"
			uci set network.lan.ifname="eth1.1"
			uci set network.wan.ifname="eth1.2"
			uci commit network
			;;
	esac	



	#allow access of the local node using a common IP address
	initial_local_node_setup

	#save defaults for use in the web-ui
	cp /etc/config/network /etc/config/network_defaults

	#reduce NDP traffic
	cat >> /etc/sysctl.conf <<-  EOF

	# increase neighbor table timings by a factor of 10
	net.ipv6.neigh.default.gc_interval=300
	net.ipv6.neigh.default.gc_stale_time=600
	net.ipv6.neigh.default.base_reachable_time_ms=300

	# by default, either accept_ra or forwarding is enabled
	# disable both here, since OpenWrt handles both apart from the Linux kernel
	net.ipv6.conf.all.accept_ra=0
	net.ipv6.conf.default.accept_ra=0
	net.ipv6.conf.br-freifunk.forwarding=0
	net.ipv6.conf.br-lan.forwarding=0

	#reboot on out of memory
	vm.panic_on_oom=1

	EOF

	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'

	#write everything to flash
	uci commit
}

update_002_to_004()
{
	echo "(I) Fix IPv6 prefix."
	uci set network.globals.ula_prefix='fdef:1701:b5ee:42::/64'
	uci delete network.freifunk.ip6addr

	echo "(I) Update node IP."
	uci set network.freifunk.ipaddr="10.11.175.127"
	sed -i 's/10\.11\.174\.0/10.11.175.127/' /etc/firewall.user
	sed -E -i 's/10\.11(\.160)?\.174\.0/10.11.175.127/' /etc/hosts

	echo "(I) Fix Freifunk netmask."
	uci set network.freifunk.netmask="255.255.240.0"

	uci commit network
}

update_004()
{
	echo "(I) Update public key for autoupdater."
	sed -i "s/7c76dcb242c477b2f60afb7d94590c47c23edea0a23b544a87b2d37ed22b9238' #randomguy/4bc8902befbf3f3d4c308caad02cc1efd32e0309837c9fae9f1a264e47f7faee' #Xperimental/" /etc/config/autoupdater
        echo "(I) Make vpn1 prefer ipv6"
        SRCSTRG="option key '961b675cf8844e756dee9bd9f138a380f717d67e8bdef930435ba31890c179ac'"
        APPENDSTRG="        list remote 'ipv6 \"vpn1.ffbsee.de\" port 1244'"
        sed -i "/$SRCSTRG/a $APPENDSTRG" /etc/config/fastd
        echo "(I) Add a 3rd VPN Server."
	printf "\nconfig peer 'vpn3'\n        option enabled 1\n        option net 'default'\n        option group 'backbone'\n        option key '1e81443889a1b9d3ee14fcbbee0aaf7331c38163ee8f64ef49fb41004ccb8280'\n        list remote 'ipv6 \"vpn3.ffbsee.de\" port 1244'\n        list remote 'ipv4 \"vpn3.ffbsee.de\" port 1244'\n        option float 0\n" >> /etc/config/fastd
}

update_005()
{
	echo "(I) Add a 4th VPN Server."
	printf "\nconfig peer 'vpn4'\n        option enabled 1\n        option net 'default'\n        option group 'backbone'\n        option key '696b6fbfa5f1cc1a8a85c78276b55448d0cb89ed9d52f30234f02a811f7132d0'\n        list remote 'ipv6 \"vpn4.ffbsee.de\" port 1244'\n        list remote 'ipv4 \"vpn4.ffbsee.de\" port 1244'\n        option float 0\n" >> /etc/config/fastd
}

update_006()
{
	# preserve self signed certificates
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	# update fastd configuration
	cp /rom/etc/config/fastd.foreign /etc/config/fastd
        cp /rom/etc/config/fastd.either /etc/config/fastd
        cp /rom/etc/config/fastd.domestic /etc/config/fastd

	local geo="$(uci get -q freifunk.@settings[0].geo)"
	local publish_map="$(uci get -q freifunk.@settings[0].publish_map)"

	# replace geo by latitude / longitude
	[  -n "$geo" ] && {
		uci set freifunk.@settings[0].latitude="${geo%% *}"
		uci set freifunk.@settings[0].longitude="${geo##* }"
		uci delete freifunk.@settings[0].geo
	}

	# add setting for chosen exit tunnel scheme and make foreign standard
        uci set freifunk.@settings[0].exittunnel="foreign"

        # add setting for explicitly using ipv6 fast connection
        uci set freifunk.@settings[0].ipv6_only="both"

	# change publish_map values
	if [ "$publish_map" = "0" ]; then
		uci set freifunk.@settings[0].publish_map="none"
	else
		uci set freifunk.@settings[0].publish_map="basic"
	fi

	# introduce new setting
	uci set freifunk.@settings[0].mesh_on_wan=0

	# rename option access_from to allow_access_from
	uci rename freifunk.@settings[0].access_from=allow_access_from
	
	# add community_url variable
	uci set freifunk.@settings[0].community_url="https://ffbsee.de"

	uci commit freifunk
	
	# set batman-adv mtu for wireless interfaces
	network_set_mesh_mtu() {
		local cfg="$1" network

		config_get network $cfg "network"
		if [ -n "$network" -a "$(uci get -q network.$network.proto)" = "batadv" ]; then
			uci set network.$network.mtu=1532
		fi
	}

	config_load wireless
	config_foreach network_set_mesh_mtu wifi-iface
	uci commit network
}

update_061()
{
	# update fastd configuration
	cp /rom/etc/config/fastd.foreign /etc/config/fastd
        cp /rom/etc/config/fastd.either /etc/config/fastd
        cp /rom/etc/config/fastd.domestic /etc/config/fastd
}

start()
{
	echo "(I) Start freifunk_setup"

	local from_version="$(uci get -q freifunk.@settings[0].version)"
	local to_version="$(uci get -c /rom/etc/config -q freifunk.@settings[0].version)"

	#marker to check if the setup has already been run before
	if [ -n "$(uci get -q freifunk.@settings[0].first_boot)" ]; then
		uci delete -q freifunk.@settings[0].first_boot
		from_version=""
	fi

	update_version() {
		uci set -q freifunk.@settings[0].version="$to_version"
		uci commit -q freifunk
	}

	echo "(I) Update from '$from_version' to '$to_version'"
	case "$from_version" in
		"0.0.2")
			echo "(I) Apply 0.0.2 update."
			update_002_to_004
			update_004
			update_005
			update_006
			update_version
			;;
		"0.0.3")
			echo "(I) Apply 0.0.3 update."
			update_002_to_004
			update_004
			update_005
                        update_006
			update_version
			;;
		"0.0.4")
			echo "(I) Apply 0.0.4 update."
			update_004
			update_005
                        update_006
			update_version
			;;
		"0.0.5")
			echo "(I) Apply 0.0.5 update."
			update_005
			update_006
			update_version
			;;
		"0.0.6")
			echo "(I) Apply 0.0.6 update."
			update_006
			update_version
			;;
		"0.1.0-testing")
                        echo "(I) Apply 0.1.0-testing update."
                        update_006
                        update_version
                        ;;
                "0.6.0-dev")
                	echo "(I) Apply 0.6.0-dev update."
                        update_061
                        update_version
                        ;;
                "0.6.1")
                echo "(I) Apply 0.6.1 update."
                        update_061
                        update_version
                        ;;
		"")
			echo "(I) Start initial setup."
			initial_setup
			update_version
			;;
		*)
			echo "(I) No configuration updater set. No idea what to do."
			;;
	esac

	/etc/init.d/fastd disable
	/etc/init.d/telnet disable
	/etc/init.d/alfred enable
	/etc/init.d/simple-radvd enable
	/etc/init.d/freifunk_init enable

	echo "(I) Done."
}

start
sync

exit 0
